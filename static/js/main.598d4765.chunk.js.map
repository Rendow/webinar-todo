{"version":3,"sources":["components/TodoItemsContext/todo-reducer.ts","components/TodoItemsContext/TodoItemsContext.tsx","features/EditableSpan.tsx","components/TodoItems/TodoItems.tsx","components/TodoItemForm/TodoItemForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["todoReducer","state","action","type","data","produce","draft","todoItems","unshift","id","Date","now","toString","Math","floor","random","done","filter","itemIndex","findIndex","source","destination","todo","splice","sort","a","b","title","Error","TodoItemsContext","createContext","defaultState","localStorageKey","TodoItemsContextProvider","children","useReducer","dispatch","useEffect","savedState","localStorage","getItem","JSON","parse","setItem","stringify","Provider","value","useTodoItems","todoItemsContext","useContext","EditableSpan","React","memo","props","useState","editMode","setEditMode","setTitle","TextField","onChange","e","currentTarget","onBlur","changeTitle","variant","size","color","autoFocus","onDoubleClick","spring","damping","stiffness","duration","useTodoItemListStyles","makeStyles","root","listStyle","padding","TodoItemsList","classes","onDragEnd","result","index","droppableId","direction","providedDroppable","className","ref","innerRef","droppableProps","map","item","motion","li","transition","placeholder","useTodoItemCardStyles","marginTop","marginBottom","doneRoot","textDecoration","TodoItemCard","handleDelete","useCallback","handleToggleDone","handleUpdate","draggableId","provided","Card","classnames","draggableProps","dragHandleProps","CardHeader","IconButton","aria-label","onClick","FormControlLabel","control","Checkbox","checked","name","label","details","CardContent","Typography","component","useInputStyles","TodoItemForm","useForm","handleSubmit","reset","watch","onSubmit","formData","defaultValue","rules","required","render","field","fullWidth","multiline","Button","disabled","theme","createMuiTheme","palette","primary","main","secondary","Content","Container","maxWidth","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.598d4765.chunk.js","sourcesContent":["import { produce } from 'immer';\n\n//types\nexport interface TodoItem {\n  id: string;\n  title: string;\n  details?: string;\n  done: boolean;\n}\n\nexport interface TodoItemsState {\n  todoItems: TodoItem[];\n}\n\nexport type TodoItemsAction =\n  | ReturnType<typeof sortAC>\n  | ReturnType<typeof loadStateAC>\n  | ReturnType<typeof dragAndDropAC>\n  | ReturnType<typeof addTodoAC>\n  | ReturnType<typeof deleteTodoAC>\n  | ReturnType<typeof toggleDoneAC>\n  | ReturnType<typeof updateTaskAC>;\n\n// actions\nexport const loadStateAC = (data: TodoItemsState) =>\n  ({ type: 'TODO/LOAD-STATE', data } as const);\nexport const addTodoAC = (data: { title: string; details?: string }) =>\n  ({ type: 'TODO/ADD-TODO', data } as const);\nexport const deleteTodoAC = (data: { id: string }) =>\n  ({ type: 'TODO/DELETE-TODO', data } as const);\nexport const toggleDoneAC = (data: { id: string }) =>\n  ({ type: 'TODO/TOGGLE-DONE-TODO', data } as const);\nexport const dragAndDropAC = (data: { source: number; destination: number }) =>\n  ({\n    type: 'TODO/DRAG-AND-DROP',\n    data,\n  } as const);\nexport const sortAC = () => ({ type: 'TODO/SORT' } as const);\nexport const updateTaskAC = (data: { id: string; title: string }) =>\n  ({ type: 'TODO/UPDATE-TASK', data } as const);\n\nexport function todoReducer(\n  state: TodoItemsState,\n  action: TodoItemsAction,\n): TodoItemsState {\n  switch (action.type) {\n    case 'TODO/LOAD-STATE': {\n      return action.data;\n    }\n\n    case 'TODO/ADD-TODO':\n      return produce(state, draft => {\n        draft.todoItems.unshift({ id: generateId(), done: false, ...action.data });\n      });\n\n    case 'TODO/DELETE-TODO':\n      return produce(state, draft => {\n        draft.todoItems = draft.todoItems.filter(({ id }) => id !== action.data.id);\n      });\n\n    case 'TODO/TOGGLE-DONE-TODO': {\n      const itemIndex = state.todoItems.findIndex(({ id }) => id === action.data.id);\n      return produce(state, draft => {\n        draft.todoItems[itemIndex].done = !draft.todoItems[itemIndex].done;\n      });\n    }\n\n    case 'TODO/DRAG-AND-DROP':\n      const { source, destination } = action.data;\n      return produce(state, draft => {\n        const todo = draft.todoItems.splice(source, 1);\n        draft.todoItems.splice(destination, 0, ...todo);\n      });\n\n    case 'TODO/SORT':\n      return produce(state, draft => {\n        draft.todoItems.sort((a, b) => {\n          return a.done === b.done ? 0 : a.done ? 1 : -1;\n        });\n      });\n    case 'TODO/UPDATE-TASK': {\n      const itemIndex = state.todoItems.findIndex(({ id }) => id === action.data.id);\n      return produce(state, draft => {\n        draft.todoItems[itemIndex].title = action.data.title;\n      });\n    }\n    default:\n      throw new Error();\n  }\n}\n\nfunction generateId() {\n  return `${Date.now().toString(36)}-${Math.floor(Math.random() * 1e16).toString(36)}`;\n}\n","import { createContext, ReactNode, useContext, useEffect, useReducer } from 'react';\nimport {\n  loadStateAC,\n  TodoItemsAction,\n  todoReducer,\n  TodoItemsState,\n} from './todo-reducer';\n\nconst TodoItemsContext = createContext<\n  (TodoItemsState & { dispatch: (action: TodoItemsAction) => void }) | null\n>(null);\n\nconst defaultState = { todoItems: [] };\nconst localStorageKey = 'todoListState';\n\nexport const TodoItemsContextProvider = ({ children }: { children?: ReactNode }) => {\n  const [state, dispatch] = useReducer(todoReducer, defaultState);\n\n  useEffect(() => {\n    const savedState = localStorage.getItem(localStorageKey);\n\n    if (savedState) {\n      try {\n        dispatch(loadStateAC(JSON.parse(savedState)));\n      } catch {}\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <TodoItemsContext.Provider value={{ ...state, dispatch }}>\n      {children}\n    </TodoItemsContext.Provider>\n  );\n};\n\nexport const useTodoItems = () => {\n  const todoItemsContext = useContext(TodoItemsContext);\n\n  if (!todoItemsContext) {\n    throw new Error(\n      'useTodoItems hook should only be used inside TodoItemsContextProvider',\n    );\n  }\n\n  return todoItemsContext;\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport { TextField } from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n  title: string;\n  changeTitle: (title: string) => void;\n};\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>('');\n\n  const onEditMode = () => {\n    setEditMode(true);\n    setTitle(props.title);\n  };\n\n  const offEditMode = () => {\n    setEditMode(false);\n    props.changeTitle(title);\n  };\n\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField\n      value={title}\n      onChange={onChangeTitleHandler}\n      onBlur={offEditMode}\n      variant=\"standard\"\n      size=\"small\"\n      color=\"secondary\"\n      autoFocus\n    />\n  ) : (\n    <span onDoubleClick={onEditMode}>{props.title}</span>\n  );\n});\n","import React, { useCallback } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { motion } from 'framer-motion';\nimport { useTodoItems } from '../TodoItemsContext/TodoItemsContext';\nimport {\n  deleteTodoAC,\n  dragAndDropAC,\n  sortAC,\n  TodoItem,\n  toggleDoneAC,\n  updateTaskAC,\n} from '../TodoItemsContext/todo-reducer';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from 'react-beautiful-dnd';\nimport { EditableSpan } from '../../features/EditableSpan';\n\nconst spring = {\n  type: 'spring',\n  damping: 25,\n  stiffness: 120,\n  duration: 0.25,\n};\n\nconst useTodoItemListStyles = makeStyles({\n  root: {\n    listStyle: 'none',\n    padding: '20px 0',\n  },\n});\n\nexport const TodoItemsList = function () {\n  const { todoItems } = useTodoItems();\n  const { dispatch } = useTodoItems();\n\n  const classes = useTodoItemListStyles();\n\n  const handleDragEnd = (result: DropResult) => {\n    const { destination, source } = result;\n    if (!destination) return;\n    if (\n      destination.index === source.index &&\n      destination.droppableId === source.droppableId\n    )\n      return;\n\n    dispatch(dragAndDropAC({ source: source.index, destination: destination.index }));\n  };\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId=\"todo\" direction=\"vertical\">\n        {(providedDroppable: DroppableProvided) => (\n          <ul\n            className={classes.root}\n            ref={providedDroppable.innerRef}\n            {...providedDroppable.droppableProps}\n          >\n            {todoItems.map((item, index) => (\n              <motion.li\n                key={item.id}\n                transition={spring}\n                // layout={true}\n              >\n                <TodoItemCard index={index} item={item} />\n              </motion.li>\n            ))}\n            {providedDroppable.placeholder}\n          </ul>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nconst useTodoItemCardStyles = makeStyles({\n  root: {\n    marginTop: 24,\n    marginBottom: 24,\n  },\n  doneRoot: {\n    textDecoration: 'line-through',\n    color: '#888888',\n  },\n});\n\nexport const TodoItemCard = function ({\n  item,\n  index,\n}: {\n  item: TodoItem;\n  index: number;\n}) {\n  const classes = useTodoItemCardStyles();\n  const { dispatch } = useTodoItems();\n\n  const handleDelete = useCallback(\n    () => dispatch(deleteTodoAC({ id: item.id })),\n    [item.id, dispatch],\n  );\n\n  const handleToggleDone = useCallback(() => {\n    dispatch(toggleDoneAC({ id: item.id }));\n    dispatch(sortAC());\n  }, [item.id, dispatch]);\n\n  const handleUpdate = useCallback(\n    (title: string) => {\n      dispatch(updateTaskAC({ id: item.id, title }));\n    },\n    [item.id, dispatch],\n  );\n\n  return (\n    <Draggable draggableId={item.id} index={index}>\n      {(provided: DraggableProvided) => (\n        <Card\n          className={classnames(classes.root, { [classes.doneRoot]: item.done })}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <CardHeader\n            action={\n              <IconButton aria-label=\"delete\" onClick={handleDelete}>\n                <DeleteIcon />\n              </IconButton>\n            }\n            title={\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={item.done}\n                    onChange={handleToggleDone}\n                    name={`checked-${item.id}`}\n                    color=\"primary\"\n                  />\n                }\n                label={<EditableSpan changeTitle={handleUpdate} title={item.title} />}\n              />\n            }\n          />\n          {item.details ? (\n            <CardContent>\n              <Typography variant=\"body2\" component=\"p\">\n                {item.details}\n              </Typography>\n            </CardContent>\n          ) : null}\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n","import { useTodoItems } from '../TodoItemsContext/TodoItemsContext';\nimport { useForm, Controller } from 'react-hook-form';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { addTodoAC } from '../TodoItemsContext/todo-reducer';\n\nconst useInputStyles = makeStyles(() => ({\n  root: {\n    marginBottom: 24,\n  },\n}));\n\nexport default function TodoItemForm() {\n  const classes = useInputStyles();\n  const { dispatch } = useTodoItems();\n  const { control, handleSubmit, reset, watch } = useForm();\n\n  return (\n    <form\n      onSubmit={handleSubmit((formData: { title: string; details?: string }) => {\n        dispatch(addTodoAC(formData));\n        reset({ title: '', details: '' });\n      })}\n    >\n      <Controller\n        name=\"title\"\n        control={control}\n        defaultValue=\"\"\n        rules={{ required: true }}\n        render={({ field }) => (\n          <TextField {...field} label=\"TODO\" fullWidth={true} className={classes.root} />\n        )}\n      />\n      <Controller\n        name=\"details\"\n        control={control}\n        defaultValue=\"\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            label=\"Details\"\n            fullWidth={true}\n            multiline={true}\n            className={classes.root}\n          />\n        )}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        disabled={!watch('title')}\n      >\n        Add\n      </Button>\n    </form>\n  );\n}\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { TodoItemsList } from './components/TodoItems/TodoItems';\nimport { TodoItemsContextProvider } from './components/TodoItemsContext/TodoItemsContext';\nimport TodoItemForm from './components/TodoItemForm/TodoItemForm';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#9012fe',\n    },\n    secondary: {\n      main: '#b2aabf',\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <TodoItemsContextProvider>\n      <ThemeProvider theme={theme}>\n        <Content />\n      </ThemeProvider>\n    </TodoItemsContextProvider>\n  );\n}\nfunction Content() {\n  return (\n    <Container maxWidth=\"sm\">\n      <header>\n        <Typography variant=\"h2\" component=\"h1\">\n          Todo List\n        </Typography>\n      </header>\n      <main>\n        <TodoItemForm />\n        <TodoItemsList />\n      </main>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}