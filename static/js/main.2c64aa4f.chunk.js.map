{"version":3,"sources":["components/TodoItemsContext/todo-reducer.ts","components/TodoItemsContext/TodoItemsContext.tsx","features/EditableSpan.tsx","components/TodoItems/TodoItems.tsx","components/TodoItemForm/TodoItemForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["todoReducer","state","action","type","data","produce","draft","todoItems","unshift","id","Date","now","toString","Math","floor","random","done","filter","itemIndex","findIndex","source","destination","todo","splice","sort","a","b","title","Error","TodoItemsContext","createContext","defaultState","localStorageKey","TodoItemsContextProvider","children","useReducer","dispatch","useEffect","savedState","localStorage","getItem","JSON","parse","setItem","stringify","Provider","value","useTodoItems","todoItemsContext","useContext","EditableSpan","React","memo","props","useState","editMode","setEditMode","setTitle","TextField","onChange","e","currentTarget","onBlur","changeTitle","variant","size","color","autoFocus","onDoubleClick","spring","damping","stiffness","duration","useTodoItemListStyles","makeStyles","root","listStyle","padding","TodoItemsList","classes","onDragEnd","result","provided","index","droppableId","direction","providedDroppable","className","ref","innerRef","droppableProps","map","item","motion","li","transition","placeholder","useTodoItemCardStyles","marginTop","marginBottom","doneRoot","textDecoration","TodoItemCard","handleDelete","useCallback","handleToggleDone","handleUpdate","draggableId","Card","classnames","draggableProps","dragHandleProps","CardHeader","IconButton","aria-label","onClick","FormControlLabel","control","Checkbox","checked","name","label","details","CardContent","Typography","component","useInputStyles","TodoItemForm","useForm","handleSubmit","reset","watch","onSubmit","formData","defaultValue","rules","required","render","field","fullWidth","multiline","Button","disabled","theme","createMuiTheme","palette","primary","main","secondary","Content","Container","maxWidth","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2YAiCO,SAASA,EAAYC,EAAuBC,GAC/C,OAAQA,EAAOC,MAEX,IAAK,kBACD,OAAOD,EAAOE,KAGlB,IAAK,gBACD,OAAOC,YAAQJ,GAAQ,SAACK,GACpBA,EAAMC,UAAUC,QAAhB,aAAyBC,GA4C/B,GAAN,OAAUC,KAAKC,MAAMC,SAAS,IAA9B,YAAqCC,KAAKC,MACtB,KAAhBD,KAAKE,UACPH,SAAS,KA9C4CI,MAAM,GAAUd,EAAOE,UAG1E,IAAK,mBACD,OAAOC,YAAQJ,GAAQ,SAACK,GACpBA,EAAMC,UAAYD,EAAMC,UAAUU,QAAO,qBAAER,KAAeP,EAAOE,KAAKK,SAG9E,IAAK,wBACD,IAAMS,EAAYjB,EAAMM,UAAUY,WAC9B,qBAAEV,KAAeP,EAAOE,KAAKK,MAEjC,OAAOJ,YAAQJ,GAAQ,SAACK,GACpBA,EAAMC,UAAUW,GAAWF,MAAQV,EAAMC,UAAUW,GAAWF,QAItE,IAAK,qBACA,MAA8Bd,EAAOE,KAA9BgB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,YACf,OAAOhB,YAAQJ,GAAQ,SAACK,GAAW,IAAD,EACzBgB,EAAOhB,EAAMC,UAAUgB,OAAOH,EAAQ,IAC5C,EAAAd,EAAMC,WAAUgB,OAAhB,SAAuBF,EAAa,GAApC,mBAA0CC,QAGlD,IAAK,YACD,OAAOjB,YAAQJ,GAAQ,SAACK,GACpBA,EAAMC,UAAUiB,MAAK,SAACC,EAAGC,GACtB,OAAQD,EAAET,OAASU,EAAEV,KAAQ,EAAIS,EAAET,KAAO,GAAK,QAG1D,IAAK,mBACD,IAAME,EAAYjB,EAAMM,UAAUY,WAC9B,qBAAEV,KAAeP,EAAOE,KAAKK,MAEjC,OAAOJ,YAAQJ,GAAQ,SAACK,GACpBA,EAAMC,UAAUW,GAAWS,MAAQzB,EAAOE,KAAKuB,SAGvD,QACI,MAAM,IAAIC,O,WCvEhBC,EAAmBC,wBAEvB,MAEIC,EAAe,CAAExB,UAAW,IAC5ByB,EAAkB,gBAGXC,EAA2B,SAAC,GAIlC,IAHHC,EAGE,EAHFA,SAIA,EAA0BC,qBAAWnC,EAAa+B,GAAlD,mBAAO9B,EAAP,KAAcmC,EAAd,KAgBA,OAdAC,qBAAU,WACN,IAAMC,EAAaC,aAAaC,QAAQR,GAExC,GAAIM,EACA,IACIF,EDNsC,CAACjC,KAAM,kBAAmBC,KCM3CqC,KAAKC,MAAMJ,KAClC,aAEP,IAEHD,qBAAU,WACNE,aAAaI,QAAQX,EAAiBS,KAAKG,UAAU3C,MACtD,CAACA,IAGA,cAAC4B,EAAiBgB,SAAlB,CAA2BC,MAAK,2BAAO7C,GAAP,IAAcmC,aAA9C,SACKF,KAKAa,EAAe,WACxB,IAAMC,EAAmBC,qBAAWpB,GAEpC,IAAKmB,EACD,MAAM,IAAIpB,MACN,yEAIR,OAAOoB,G,iBC/CEE,EAAeC,IAAMC,MAAK,SAACC,GACtC,MAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAiB,IAA3C,mBAAO3B,EAAP,KAAc8B,EAAd,KAgBA,OACEF,EACI,cAACG,EAAA,EAAD,CACAZ,MAAOnB,EACPgC,SARuB,SAACC,GAC5BH,EAASG,EAAEC,cAAcf,QAQrBgB,OAdc,WAClBN,GAAY,GACZH,EAAMU,YAAYpC,IAadqC,QAAQ,WACRC,KAAK,QACLC,MAAM,YACNC,WAAS,IAET,sBAAMC,cAzBO,WACjBZ,GAAY,GACZC,EAASJ,EAAM1B,QAuBX,SAAkC0B,EAAM1B,WCL1C0C,EAAS,CACXlE,KAAM,SACNmE,QAAS,GACTC,UAAW,IACXC,SAAU,KAGRC,EAAwBC,YAAW,CACrCC,KAAM,CACFC,UAAW,OACXC,QAAS,YAKJC,EAAgB,WACzB,IAAOvE,EAAawC,IAAbxC,UACA6B,EAAYW,IAAZX,SAED2C,EAAUN,IAShB,OACI,cAAC,IAAD,CAAiBO,UARC,SAACC,EAAoBC,GACvC,IAAO7D,EAAuB4D,EAAvB5D,YAAaD,EAAU6D,EAAV7D,OACfC,IACDA,EAAY8D,QAAU/D,EAAO+D,OAAS9D,EAAY+D,cAAgBhE,EAAOgE,aAE7EhD,EH9ByE,CAACjC,KAAM,qBAAsBC,KG8B/E,CAACgB,OAAQA,EAAO+D,MAAO9D,YAAaA,EAAY8D,WAGvE,SACI,cAAC,IAAD,CAAWC,YAAY,OAAOC,UAAU,WAAxC,SACK,SAACC,GAAD,OACG,6CAAIC,UAAWR,EAAQJ,KACnBa,IAAKF,EAAkBG,UAAeH,EAAkBI,gBAD5D,cAGKnF,EAAUoF,KAAI,SAACC,EAAMT,GAAP,OACX,cAACU,EAAA,EAAOC,GAAR,CAAyBC,WAAY1B,EAArC,SAGI,cAAC,EAAD,CAAcc,MAAOA,EAAOS,KAAMA,KAHtBA,EAAKnF,OAKxB6E,EAAkBU,sBAQrCC,EAAwBvB,YAAW,CACrCC,KAAM,CACFuB,UAAW,GACXC,aAAc,IAElBC,SAAU,CACNC,eAAgB,eAChBnC,MAAO,aAIFoC,EAAe,YAA6D,IAAlDV,EAAiD,EAAjDA,KAAMT,EAA2C,EAA3CA,MACnCJ,EAAUkB,IACT7D,EAAYW,IAAZX,SAEDmE,EAAeC,uBACjB,kBAAMpE,EHvEyC,CAACjC,KAAM,mBAAoBC,KGuE9C,CAACK,GAAImF,EAAKnF,QACtC,CAACmF,EAAKnF,GAAI2B,IAGRqE,EAAmBD,uBACrB,WACIpE,EH5E2C,CAACjC,KAAM,wBAAyBC,KG4ErD,CAACK,GAAImF,EAAKnF,MAChC2B,EH3EiB,CAACjC,KAAM,gBG4EzB,CAACyF,EAAKnF,GAAI2B,IAEXsE,EAAeF,uBACjB,SAAC7E,GACGS,EH/EyD,CAACjC,KAAM,mBAAmBC,KG+E7D,CAACK,GAAImF,EAAKnF,GAAIkB,aAEvC,CAACiE,EAAKnF,GAAI2B,IAEf,OACI,cAAC,IAAD,CACIuE,YAAaf,EAAKnF,GAAI0E,MAAOA,EADjC,SAEK,SAACD,GAAD,OAEG,eAAC0B,EAAA,EAAD,qCACIrB,UAAWsB,IAAW9B,EAAQJ,KAAT,eAAiBI,EAAQqB,SAAWR,EAAK5E,OAC9DwE,IAAKN,EAASO,UACVP,EAAS4B,gBACT5B,EAAS6B,iBAJjB,cAOI,cAACC,EAAA,EAAD,CACI9G,OACI,cAAC+G,EAAA,EAAD,CAAYC,aAAW,SAASC,QAASZ,EAAzC,SACI,cAAC,IAAD,MAGR5E,MACI,cAACyF,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAAS3B,EAAK5E,KACd2C,SAAU8C,EACVe,KAAI,kBAAa5B,EAAKnF,IACtByD,MAAM,YAIduD,MAAO,cAACvE,EAAD,CAAca,YAAa2C,EAAc/E,MAAOiE,EAAKjE,YAIvEiE,EAAK8B,QACF,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAY5D,QAAQ,QAAQ6D,UAAU,IAAtC,SACKjC,EAAK8B,YAGd,a,iBCjJlBI,EAAiBpD,aAAW,iBAAO,CACrCC,KAAM,CACFwB,aAAc,QAIP,SAAS4B,IACpB,IAAMhD,EAAU+C,IACR1F,EAAaW,IAAbX,SACR,EAAgD4F,cAAxCX,EAAR,EAAQA,QAASY,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAAOC,EAAtC,EAAsCA,MAEtC,OACI,uBACIC,SAAUH,GAAa,SAACI,GACpBjG,EJIyD,CAACjC,KAAM,gBAAiBC,KIJ9DiI,IACnBH,EAAM,CAAEvG,MAAO,GAAI+F,QAAS,QAHpC,UAMI,cAAC,IAAD,CACIF,KAAK,QACLH,QAASA,EACTiB,aAAa,GACbC,MAAO,CAAEC,UAAU,GACnBC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACJ,cAAChF,EAAA,EAAD,2BACQgF,GADR,IAEIjB,MAAM,OACNkB,WAAW,EACXpD,UAAWR,EAAQJ,WAI/B,cAAC,IAAD,CACI6C,KAAK,UACLH,QAASA,EACTiB,aAAa,GACbG,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACJ,cAAChF,EAAA,EAAD,2BACQgF,GADR,IAEIjB,MAAM,UACNkB,WAAW,EACXC,WAAW,EACXrD,UAAWR,EAAQJ,WAI/B,cAACkE,EAAA,EAAD,CACI7E,QAAQ,YACRE,MAAM,UACN/D,KAAK,SACL2I,UAAWX,EAAM,SAJrB,oBC5CZ,IAAMY,EAAQC,YAAgB,CAC1BC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cAelB,SAASE,IACL,OACI,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACI,iCACI,cAAC3B,EAAA,EAAD,CAAY5D,QAAQ,KAAK6D,UAAU,KAAnC,yBAIJ,iCACI,cAACE,EAAD,IACA,cAAC,EAAD,UAMDyB,MA1Bf,WACI,OACI,cAAC,EAAD,UACI,cAACC,EAAA,EAAD,CAAeV,MAAOA,EAAtB,SACI,cAACM,EAAD,SCRDK,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAAS1B,OACL,cAAC,IAAM2B,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.2c64aa4f.chunk.js","sourcesContent":["import {produce} from 'immer'\r\n\r\n//types\r\nexport interface TodoItem {\r\n    id: string;\r\n    title: string;\r\n    details?: string;\r\n    done: boolean;\r\n}\r\n\r\nexport interface TodoItemsState {\r\n    todoItems: TodoItem[]\r\n}\r\n\r\nexport type TodoItemsAction =\r\n    ReturnType<typeof sortAC>\r\n    | ReturnType<typeof loadStateAC>\r\n    | ReturnType<typeof dragAndDropAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof deleteTodoAC>\r\n    | ReturnType<typeof toggleDoneAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n\r\n// actions\r\nexport const loadStateAC = (data: TodoItemsState) => ({type: 'TODO/LOAD-STATE', data} as const)\r\nexport const addTodoAC = (data: { title: string; details?: string }) => ({type: 'TODO/ADD-TODO', data} as const)\r\nexport const deleteTodoAC = (data: { id: string }) => ({type: 'TODO/DELETE-TODO', data} as const)\r\nexport const toggleDoneAC = (data: { id: string }) => ({type: 'TODO/TOGGLE-DONE-TODO', data} as const)\r\nexport const dragAndDropAC = (data: { source: number, destination: number }) => ({type: 'TODO/DRAG-AND-DROP', data} as const)\r\nexport const sortAC = () => ({type: 'TODO/SORT'} as const)\r\nexport const updateTaskAC = (data: { id: string, title:string }) => ({type: 'TODO/UPDATE-TASK',data} as const)\r\n\r\n\r\nexport function todoReducer(state: TodoItemsState, action: TodoItemsAction):TodoItemsState {\r\n    switch (action.type) {\r\n\r\n        case 'TODO/LOAD-STATE': {\r\n            return action.data;\r\n        }\r\n\r\n        case 'TODO/ADD-TODO':\r\n            return produce(state, ((draft) => {\r\n                draft.todoItems.unshift({id: generateId(), done: false, ...action.data})\r\n            }))\r\n\r\n        case 'TODO/DELETE-TODO':\r\n            return produce(state, ((draft) => {\r\n                draft.todoItems = draft.todoItems.filter(({id}) => id !== action.data.id)\r\n            }));\r\n\r\n        case 'TODO/TOGGLE-DONE-TODO': {\r\n            const itemIndex = state.todoItems.findIndex(\r\n                ({id}) => id === action.data.id,\r\n            );\r\n            return produce(state, ((draft) => {\r\n                draft.todoItems[itemIndex].done = !draft.todoItems[itemIndex].done\r\n            }));\r\n        }\r\n\r\n        case 'TODO/DRAG-AND-DROP':\r\n             const {source, destination} = action.data\r\n             return produce(state, ((draft) => {\r\n                const todo = draft.todoItems.splice(source, 1)\r\n                draft.todoItems.splice(destination, 0, ...todo)\r\n            }));\r\n\r\n        case 'TODO/SORT':\r\n            return produce(state, ((draft) => {\r\n                draft.todoItems.sort((a, b) => {\r\n                   return (a.done === b.done) ? 0 : a.done ? 1 : -1;\r\n               })\r\n            }))\r\n        case 'TODO/UPDATE-TASK': {\r\n            const itemIndex = state.todoItems.findIndex(\r\n                ({id}) => id === action.data.id,\r\n            );\r\n            return produce(state, ((draft) => {\r\n                draft.todoItems[itemIndex].title = action.data.title\r\n            }))\r\n        }\r\n        default:\r\n            throw new Error()\r\n    }\r\n}\r\n\r\nfunction generateId() {\r\n    return `${Date.now().toString(36)}-${Math.floor(\r\n        Math.random() * 1e16,\r\n    ).toString(36)}`;\r\n}\r\n\r\n","import {\n    createContext,\n    ReactNode,\n    useContext,\n    useEffect,\n    useReducer,\n} from 'react';\nimport {loadStateAC, TodoItemsAction, todoReducer, TodoItemsState} from \"./todo-reducer\";\n\n\nconst TodoItemsContext = createContext<\n    (TodoItemsState & { dispatch: (action: TodoItemsAction) => void }) | null\n>(null);\n\nconst defaultState = { todoItems: [] };\nconst localStorageKey = 'todoListState';\n\n\nexport const TodoItemsContextProvider = ({\n    children,\n}: {\n    children?: ReactNode;\n}) => {\n    const [state, dispatch] = useReducer(todoReducer, defaultState);\n\n    useEffect(() => {\n        const savedState = localStorage.getItem(localStorageKey);\n\n        if (savedState) {\n            try {\n                dispatch(loadStateAC(JSON.parse(savedState)));\n            } catch {}\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem(localStorageKey, JSON.stringify(state));\n    }, [state]);\n\n    return (\n        <TodoItemsContext.Provider value={{ ...state, dispatch }}>\n            {children}\n        </TodoItemsContext.Provider>\n    );\n};\n\nexport const useTodoItems = () => {\n    const todoItemsContext = useContext(TodoItemsContext);\n\n    if (!todoItemsContext) {\n        throw new Error(\n            'useTodoItems hook should only be used inside TodoItemsContextProvider',\n        );\n    }\n\n    return todoItemsContext;\n};\n\n","import React, {ChangeEvent, useState} from 'react'\nimport {TextField} from '@material-ui/core'\n\ntype EditableSpanPropsType = {\n  title: string\n  changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState<boolean>(false)\n  const [title, setTitle] = useState<string>('')\n\n  const onEditMode = () => {\n    setEditMode(true)\n    setTitle(props.title)\n  }\n\n  const offEditMode = () => {\n    setEditMode(false)\n    props.changeTitle(title)\n  }\n\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n\n  return (\n    editMode\n      ? <TextField\n        value={title}\n        onChange={onChangeTitleHandler}\n        onBlur={offEditMode}\n        variant=\"standard\"\n        size=\"small\"\n        color=\"secondary\"\n        autoFocus\n      />\n      : <span onDoubleClick={onEditMode}>{props.title}</span>\n  )\n})\n","import React, {useCallback} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {makeStyles} from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport {motion} from 'framer-motion';\nimport {useTodoItems} from '../TodoItemsContext/TodoItemsContext';\nimport {\n    deleteTodoAC,\n    dragAndDropAC,\n    sortAC,\n    TodoItem,\n    toggleDoneAC,\n    updateTaskAC\n} from \"../TodoItemsContext/todo-reducer\";\nimport {\n    DragDropContext,\n    Draggable,\n    DraggableProvided,\n    Droppable,\n    DroppableProvided,\n    DropResult,\n    ResponderProvided\n} from 'react-beautiful-dnd';\nimport {EditableSpan} from \"../../features/EditableSpan\";\n\nconst spring = {\n    type: 'spring',\n    damping: 25,\n    stiffness: 120,\n    duration: 0.25,\n};\n\nconst useTodoItemListStyles = makeStyles({\n    root: {\n        listStyle: 'none',\n        padding: '20px 0',\n    },\n});\n\n\nexport const TodoItemsList = function () {\n    const {todoItems} = useTodoItems();\n    const {dispatch} = useTodoItems();\n\n    const classes = useTodoItemListStyles();\n\n    const handleDragEnd = (result: DropResult, provided?: ResponderProvided) => {\n        const {destination, source} = result\n        if (!destination) return;\n        if (destination.index === source.index && destination.droppableId === source.droppableId) return;\n\n        dispatch(dragAndDropAC({source: source.index, destination: destination.index}))\n    }\n    return (\n        <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId=\"todo\" direction=\"vertical\">\n                {(providedDroppable: DroppableProvided) => (\n                    <ul className={classes.root}\n                        ref={providedDroppable.innerRef}  {...providedDroppable.droppableProps}>\n\n                        {todoItems.map((item, index) => (\n                            <motion.li key={item.id} transition={spring}\n                               // layout={true}\n                            >\n                                <TodoItemCard index={index} item={item}/>\n                            </motion.li>))}\n                        {providedDroppable.placeholder}\n\n                    </ul>)}\n            </Droppable>\n        </DragDropContext>\n    );\n};\n\nconst useTodoItemCardStyles = makeStyles({\n    root: {\n        marginTop: 24,\n        marginBottom: 24,\n    },\n    doneRoot: {\n        textDecoration: 'line-through',\n        color: '#888888',\n    },\n});\n\nexport const TodoItemCard = function ({item, index}: { item: TodoItem, index: number }) {\n    const classes = useTodoItemCardStyles();\n    const {dispatch} = useTodoItems();\n\n    const handleDelete = useCallback(\n        () => dispatch(deleteTodoAC({id: item.id})),\n        [item.id, dispatch],\n    );\n\n    const handleToggleDone = useCallback(\n        () => {\n            dispatch(toggleDoneAC({id: item.id}));\n            dispatch(sortAC())\n        }, [item.id, dispatch]);\n\n    const handleUpdate = useCallback(\n        (title:string) => {\n            dispatch(updateTaskAC({id: item.id, title}))\n        }\n        ,[item.id, dispatch]);\n\n    return (\n        <Draggable\n            draggableId={item.id} index={index}>\n            {(provided: DraggableProvided) => (\n\n                <Card\n                    className={classnames(classes.root, {[classes.doneRoot]: item.done,})}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                >\n\n                    <CardHeader\n                        action={\n                            <IconButton aria-label=\"delete\" onClick={handleDelete}>\n                                <DeleteIcon/>\n                            </IconButton>\n                        }\n                        title={\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={item.done}\n                                        onChange={handleToggleDone}\n                                        name={`checked-${item.id}`}\n                                        color=\"primary\"\n                                    />\n                                }\n\n                                label={<EditableSpan changeTitle={handleUpdate} title={item.title}/>}\n                            />\n                        }\n                    />\n                    {item.details ? (\n                        <CardContent>\n                            <Typography variant=\"body2\" component=\"p\">\n                                {item.details}\n                            </Typography>\n                        </CardContent>\n                    ) : null}\n                </Card>\n            )}\n\n        </Draggable>\n    );\n};\n","import { useTodoItems } from '../TodoItemsContext/TodoItemsContext';\nimport { useForm, Controller } from 'react-hook-form';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {addTodoAC} from \"../TodoItemsContext/todo-reducer\";\n\nconst useInputStyles = makeStyles(() => ({\n    root: {\n        marginBottom: 24,\n    },\n}));\n\nexport default function TodoItemForm() {\n    const classes = useInputStyles();\n    const { dispatch } = useTodoItems();\n    const { control, handleSubmit, reset, watch } = useForm();\n\n    return (\n        <form\n            onSubmit={handleSubmit((formData: { title: string; details?: string}) => {\n                dispatch(addTodoAC(formData));\n                reset({ title: '', details: '' });\n            })}\n        >\n            <Controller\n                name=\"title\"\n                control={control}\n                defaultValue=\"\"\n                rules={{ required: true }}\n                render={({ field }) => (\n                    <TextField\n                        {...field}\n                        label=\"TODO\"\n                        fullWidth={true}\n                        className={classes.root}\n                    />\n                )}\n            />\n            <Controller\n                name=\"details\"\n                control={control}\n                defaultValue=\"\"\n                render={({ field }) => (\n                    <TextField\n                        {...field}\n                        label=\"Details\"\n                        fullWidth={true}\n                        multiline={true}\n                        className={classes.root}\n                    />\n                )}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                disabled={!watch('title')}\n            >\n                Add\n            </Button>\n        </form>\n    );\n}\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport {createMuiTheme} from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { TodoItemsList } from './components/TodoItems/TodoItems';\nimport { TodoItemsContextProvider } from './components/TodoItemsContext/TodoItemsContext';\nimport TodoItemForm from './components/TodoItemForm/TodoItemForm';\n\nconst theme = createMuiTheme ({\n    palette: {\n        primary: {\n            main: '#9012fe',\n        },\n        secondary: {\n            main: '#b2aabf',\n        },\n    },\n});\n\nfunction App() {\n    return (\n        <TodoItemsContextProvider>\n            <ThemeProvider theme={theme}>\n                <Content />\n            </ThemeProvider>\n        </TodoItemsContextProvider>\n    );\n}\n\nfunction Content() {\n    return (\n        <Container maxWidth=\"sm\">\n            <header>\n                <Typography variant=\"h2\" component=\"h1\">\n                    Todo List\n                </Typography>\n            </header>\n            <main>\n                <TodoItemForm />\n                <TodoItemsList />\n            </main>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}